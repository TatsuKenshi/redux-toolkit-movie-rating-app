{"ast":null,"code":"// import createSlice, createAsyncThunk\n// thunk is there for asynchronous tasks\nimport { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport MovieApi from \"../../common/api/MovieApi\";\nimport { APIKey } from \"../../common/api/MovieApiKey\"; // the thunk takes two arguments - name (string) and a payload-creator callback function\n// the name is usually a combo of the reducer's name and the name of the variable the thunk is assigned to\n// the callback function, in this case, is the movie fetch function\n// optionally, the thunk can take a third argument - an object\n// dispatch\n\nconst dispatch = useDispatch();\nconst fetchAsyncMovies = createAsyncThunk(\"movies/fetchAsyncMovies\", async () => {\n  const movieText = \"Harry\";\n  const response = await MovieApi.get(`?apiKey=${APIKey}&s=${movieText}&type=movie`).catch(error => {\n    console.log(\"Error : \", error);\n  }); // dispatch the addMovies action to the Redux store to update the movies state\n  // send the response.data object, as it contains the movies\n\n  dispatch(addMovies(response.data));\n}); // initial state\n\nconst initialState = {\n  movies: {}\n}; // create the movies slice\n\nconst movieSlice = createSlice({\n  // name of the slice\n  name: \"movies\",\n  // initial state\n  initialState,\n  // reducers/actions object\n  reducers: {\n    addMovies: (state, _ref) => {\n      let {\n        payload\n      } = _ref;\n      // immer takes care of state immutability\n      state.movies = payload;\n    }\n  }\n});\nexport const {\n  addMovies\n} = movieSlice.actions; // func to get all the movies in the state\n\nexport const getAllMovies = state => state.movies.movies;\nexport default movieSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","MovieApi","APIKey","dispatch","useDispatch","fetchAsyncMovies","movieText","response","get","catch","error","console","log","addMovies","data","initialState","movies","movieSlice","name","reducers","state","payload","actions","getAllMovies","reducer"],"sources":["/home/miki/Documents/Programming/redux-toolkit-movie-rating-app/src/features/movies/movieSlice.js"],"sourcesContent":["// import createSlice, createAsyncThunk\n// thunk is there for asynchronous tasks\nimport { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport MovieApi from \"../../common/api/MovieApi\";\nimport { APIKey } from \"../../common/api/MovieApiKey\";\n\n// the thunk takes two arguments - name (string) and a payload-creator callback function\n// the name is usually a combo of the reducer's name and the name of the variable the thunk is assigned to\n// the callback function, in this case, is the movie fetch function\n// optionally, the thunk can take a third argument - an object\n\n// dispatch\nconst dispatch = useDispatch();\n\nconst fetchAsyncMovies = createAsyncThunk(\n    \"movies/fetchAsyncMovies\",\n\n    async () => {\n        const movieText = \"Harry\";\n        const response = await MovieApi.get(\n            `?apiKey=${APIKey}&s=${movieText}&type=movie`\n        ).catch((error) => {\n            console.log(\"Error : \", error);\n        });\n        // dispatch the addMovies action to the Redux store to update the movies state\n        // send the response.data object, as it contains the movies\n        dispatch(addMovies(response.data));\n    }\n);\n\n// initial state\nconst initialState = {\n    movies: {},\n};\n\n// create the movies slice\nconst movieSlice = createSlice({\n    // name of the slice\n    name: \"movies\",\n    // initial state\n    initialState,\n    // reducers/actions object\n    reducers: {\n        addMovies: (state, { payload }) => {\n            // immer takes care of state immutability\n            state.movies = payload;\n        },\n    },\n});\n\nexport const { addMovies } = movieSlice.actions;\n\n// func to get all the movies in the state\nexport const getAllMovies = (state) => state.movies.movies;\nexport default movieSlice.reducer;\n"],"mappings":"AAAA;AACA;AACA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AACA,OAAOC,QAAP,MAAqB,2BAArB;AACA,SAASC,MAAT,QAAuB,8BAAvB,C,CAEA;AACA;AACA;AACA;AAEA;;AACA,MAAMC,QAAQ,GAAGC,WAAW,EAA5B;AAEA,MAAMC,gBAAgB,GAAGL,gBAAgB,CACrC,yBADqC,EAGrC,YAAY;EACR,MAAMM,SAAS,GAAG,OAAlB;EACA,MAAMC,QAAQ,GAAG,MAAMN,QAAQ,CAACO,GAAT,CAClB,WAAUN,MAAO,MAAKI,SAAU,aADd,EAErBG,KAFqB,CAEdC,KAAD,IAAW;IACfC,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBF,KAAxB;EACH,CAJsB,CAAvB,CAFQ,CAOR;EACA;;EACAP,QAAQ,CAACU,SAAS,CAACN,QAAQ,CAACO,IAAV,CAAV,CAAR;AACH,CAboC,CAAzC,C,CAgBA;;AACA,MAAMC,YAAY,GAAG;EACjBC,MAAM,EAAE;AADS,CAArB,C,CAIA;;AACA,MAAMC,UAAU,GAAGlB,WAAW,CAAC;EAC3B;EACAmB,IAAI,EAAE,QAFqB;EAG3B;EACAH,YAJ2B;EAK3B;EACAI,QAAQ,EAAE;IACNN,SAAS,EAAE,CAACO,KAAD,WAAwB;MAAA,IAAhB;QAAEC;MAAF,CAAgB;MAC/B;MACAD,KAAK,CAACJ,MAAN,GAAeK,OAAf;IACH;EAJK;AANiB,CAAD,CAA9B;AAcA,OAAO,MAAM;EAAER;AAAF,IAAgBI,UAAU,CAACK,OAAjC,C,CAEP;;AACA,OAAO,MAAMC,YAAY,GAAIH,KAAD,IAAWA,KAAK,CAACJ,MAAN,CAAaA,MAA7C;AACP,eAAeC,UAAU,CAACO,OAA1B"},"metadata":{},"sourceType":"module"}